:github_url: https://github.com/sensu/sensu-go-ansible/blob/master/plugins/modules/filter.py

.. _filter_module:

filter -- Manage Sensu filters
==============================

Create, update or delete Sensu filter.

For more information, refer to the Sensu documentation at https://docs.sensu.io/sensu-go/latest/reference/filters/.




Examples
--------

.. code-block:: yaml+jinja

   
   - name: Create a filter
     sensu.sensu_go.filter:
       name: filter
       action: deny
       expressions:
         - event.check.interval == 10
         - event.check.occurrences == 1
       runtime_assets: awesomeness

   - name: Create a production filter
     sensu.sensu_go.filter:
       name: filter
       action: allow
       expressions:
         - event.entity.labels['environment'] == 'production'

   - name: Create a filter with JS expression
     sensu.sensu_go.filter:
       name: filter
       action: deny
       expressions:
         - "_.reduce(event.check.history, function(memo, h) { return (memo || h.status != 0); })"
       runtime_assets:
         - underscore

   - name: Handling repeated events
     sensu.sensu_go.filter:
       name: filter_interval_60_hourly
       action: allow
       expressions:
         - event.check.interval == 60
         - event.check.occurrences == 1 || event.check.occurrences % 60 == 0

   - name: Delete a filter
     sensu.sensu_go.filter:
       name: filter_interval_60_hourly
       state: absent





See Also
--------

.. seealso::

   - :ref:`filter_info_module`



Parameters
----------

action (optional)
  Action to take with the event if the filter expressions match.

  Required if *state* is ``present``.

  | **type**: str
  | **choices**: allow, deny

annotations (optional)
  Custom metadata fields with fewer restrictions, as key/value pairs.

  These are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.

  | **type**: dict

auth (optional)
  Authentication parameters. Can define each of them with ENV as well.

  | **type**: dict

  api_key (optional)
    The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.

    This replaces *auth.user* and *auth.password* parameters.

    For more information about the API key, refer to the official Sensu documentation at https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/.

    | **type**: str

  ca_path (optional)
    Path to the CA bundle that should be used to validate the backend certificate.

    If this parameter is not set, module will use the CA bundle that python is using.

    It is also possible to set this parameter via the *SENSU_CA_PATH* environment variable.

    | **type**: path

  password (optional)
    The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.

    This parameter is ignored if the *auth.api_key* parameter is set.

    | **type**: str
    | **default**: P@ssw0rd!

  url (optional)
    Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.

    | **type**: str
    | **default**: http://localhost:8080

  user (optional)
    The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.

    This parameter is ignored if the *auth.api_key* parameter is set.

    | **type**: str
    | **default**: admin

  verify (optional)
    Flag that controls the certificate validation.

    If you are using self-signed certificates, you can set this parameter to ``false``.

    ONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the *auth.ca_path* parameter.

    It is also possible to set this parameter via the *SENSU_VERIFY* environment variable.

    | **type**: bool
    | **default**: True


expressions (optional)
  Filter expressions to be compared with event data.

  Required if *state* is ``present``.

  | **type**: list

labels (optional)
  Custom metadata fields that can be accessed within Sensu, as key/value pairs.

  | **type**: dict

name (required)
  The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.

  If the resource with selected name already exists, Ansible module will update it to match the specification in the task.

  Consult the *name* metadata attribute specification in the upstream docs on https://docs.sensu.io/sensu-go/latest/reference/ for more details about valid names and other restrictions.

  | **type**: str

namespace (optional)
  RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.

  | **type**: str
  | **default**: default

runtime_assets (optional)
  Assets to be applied to the filter's execution context. JavaScript files in the lib directory of the asset will be evaluated.

  | **type**: list

state (optional)
  Target state of the Sensu object.

  | **type**: str
  | **default**: present
  | **choices**: present, absent





Return Values
-------------

object (success), dict, )
  object representing Sensu filter



